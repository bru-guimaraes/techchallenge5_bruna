name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Testes Unitários
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Prepare test environment
        working-directory: projeto_datathon_brunag/src
        run: |
          mkdir -p model
          touch model/pipeline.joblib
          echo "PATH_MODEL=$(pwd)/model/pipeline.joblib" >> $GITHUB_ENV
          mkdir -p data/parquet/{applicants,prospects,vagas}
          echo "PATH_PARQUET_APPLICANTS=$(pwd)/data/parquet/applicants" >> $GITHUB_ENV
          echo "PATH_PARQUET_PROSPECTS=$(pwd)/data/parquet/prospects" >> $GITHUB_ENV
          echo "PATH_PARQUET_VAGAS=$(pwd)/data/parquet/vagas" >> $GITHUB_ENV

      - name: Install dependencies
        working-directory: projeto_datathon_brunag/src
        run: |
          pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt pytest

      - name: Run tests
        working-directory: projeto_datathon_brunag/src
        run: pytest tests/ --maxfail=1 --disable-warnings -q

  deploy:
    name: Deploy no EC2
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy remoto via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            # Clona só se não existir o diretório
            [ -d "$HOME/techchallenge5_bruna/src" ] || git clone https://github.com/bru-guimaraes/techchallenge5_bruna.git $HOME/techchallenge5_bruna

            cd $HOME/techchallenge5_bruna/src

            git pull

            docker stop datathon-api || true
            docker rm datathon-api || true

            docker build --no-cache -t datathon-api:latest .

            docker run -d --name datathon-api \
              -p 8000:8000 \
              --log-driver=awslogs \
              --log-opt awslogs-region=us-east-1 \
              --log-opt awslogs-group=datathon-logs \
              --log-opt awslogs-stream=api-stream \
              datathon-api:latest
          EOF
